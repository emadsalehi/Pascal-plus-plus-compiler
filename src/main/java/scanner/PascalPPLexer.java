/* The following code was generated by JFlex 1.7.0 */

/*-***
 *
 * This file defines a stand-alone lexical analyzer for a subset of the Pascal
 * programming language.  This is the same lexer that will later be integrated
 * with a CUP-based parser.  Here the lexer is driven by the simple Java test
 * program in ./PascalLexerTest.java, q.v.  See 330 Lecture Notes 2 and the
 * Assignment 2 writeup for further discussion.
 *
 */

package scanner;

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/home/emad/Downloads/PascalPPCompiler/Pascal plus plus compiler/src/main/java/scanner/PascalPP.jflex</tt>
 */
public class PascalPPLexer implements java_cup.runtime.Scanner {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\16\1\6\1\10\1\7\1\7\22\0\1\16\1\0\1\20" +
                    "\2\0\1\44\1\46\1\5\1\57\1\11\1\53\1\54\1\56\1\13" +
                    "\1\4\1\15\12\2\1\63\1\55\1\12\1\62\1\14\2\0\32\1" +
                    "\1\60\1\21\1\61\1\47\1\3\1\0\1\27\1\32\1\35\1\42" +
                    "\1\25\1\26\1\40\1\36\1\37\2\1\1\30\1\52\1\34\1\33" +
                    "\1\51\1\1\1\23\1\31\1\22\1\24\1\17\1\41\1\1\1\50" +
                    "\1\1\1\0\1\45\1\0\1\43\6\0\1\10\u1fa2\0\1\10\1\10" +
                    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
    private static final String ZZ_ACTION_PACKED_0 =
            "\1\1\1\2\1\3\1\1\1\4\1\2\1\5\1\6" +
                    "\1\7\1\10\1\11\1\12\1\3\1\2\14\3\1\13" +
                    "\1\14\1\15\1\16\1\17\1\3\1\20\1\21\1\22" +
                    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\2\0" +
                    "\1\32\1\33\1\34\1\0\2\3\1\0\1\35\1\0" +
                    "\15\3\1\36\1\37\1\3\1\40\3\3\1\41\1\3" +
                    "\1\42\1\43\1\0\1\44\1\45\6\3\1\46\3\3" +
                    "\1\47\10\3\1\0\1\50\1\51\1\52\1\3\1\53" +
                    "\1\54\1\55\5\3\1\56\5\3\1\0\2\3\1\57" +
                    "\1\3\1\60\2\3\1\61\1\62\2\3\1\63\1\3" +
                    "\1\64\5\3\1\65\1\66\1\3\1\67\1\70\1\3" +
                    "\1\71";
    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();
    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\64" +
                    "\0\u016c\0\64\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4" +
                    "\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444" +
                    "\0\u0478\0\u04ac\0\64\0\64\0\64\0\64\0\64\0\u04e0" +
                    "\0\64\0\64\0\64\0\64\0\64\0\64\0\64\0\64" +
                    "\0\u0514\0\320\0\u0548\0\u057c\0\64\0\64\0\64\0\u05b0" +
                    "\0\u05e4\0\u0618\0\u023c\0\64\0\u064c\0\u0680\0\u06b4\0\u06e8" +
                    "\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888" +
                    "\0\u08bc\0\u08f0\0\150\0\150\0\u0924\0\150\0\u0958\0\u098c" +
                    "\0\u09c0\0\150\0\u09f4\0\64\0\64\0\u0a28\0\64\0\150" +
                    "\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\150\0\u0b94" +
                    "\0\u0bc8\0\u0bfc\0\150\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00" +
                    "\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\150\0\150\0\150\0\u0e04" +
                    "\0\150\0\150\0\150\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08" +
                    "\0\150\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074" +
                    "\0\u10a8\0\150\0\u10dc\0\150\0\u1110\0\u1144\0\150\0\150" +
                    "\0\u1178\0\u11ac\0\150\0\u11e0\0\150\0\u1214\0\u1248\0\u127c" +
                    "\0\u12b0\0\u12e4\0\150\0\150\0\u1318\0\150\0\150\0\u134c" +
                    "\0\150";
    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();
    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\2\1\5\1\6\2\7\1\0" +
                    "\1\10\1\11\1\12\1\13\1\14\1\7\1\15\1\16" +
                    "\1\2\1\17\1\20\1\3\1\21\1\22\1\23\1\3" +
                    "\1\24\1\25\1\26\1\3\1\27\1\3\1\30\1\3" +
                    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\3" +
                    "\1\40\1\3\1\41\1\42\1\43\1\44\1\45\1\46" +
                    "\1\47\1\50\1\51\65\0\3\3\13\0\1\3\2\0" +
                    "\21\3\5\0\3\3\13\0\1\4\1\0\1\52\61\0" +
                    "\1\52\61\0\6\53\3\0\53\53\6\0\2\7\6\0" +
                    "\2\7\57\0\1\54\1\55\45\0\1\56\63\0\1\57" +
                    "\16\0\1\60\47\0\3\3\2\0\2\7\6\0\1\7" +
                    "\1\61\2\0\5\3\1\62\13\3\5\0\3\3\11\0" +
                    "\20\63\1\64\1\65\42\63\1\0\3\3\13\0\1\3" +
                    "\2\0\1\3\1\66\12\3\1\67\4\3\5\0\1\70" +
                    "\2\3\12\0\3\3\13\0\1\3\2\0\3\3\1\71" +
                    "\15\3\5\0\3\3\12\0\3\3\13\0\1\3\2\0" +
                    "\6\3\1\72\3\3\1\73\6\3\5\0\3\3\12\0" +
                    "\3\3\13\0\1\3\2\0\2\3\1\74\2\3\1\75" +
                    "\13\3\5\0\3\3\12\0\3\3\13\0\1\3\2\0" +
                    "\1\3\1\76\10\3\1\77\6\3\5\0\3\3\12\0" +
                    "\3\3\13\0\1\3\2\0\1\100\20\3\5\0\3\3" +
                    "\12\0\3\3\13\0\1\3\2\0\3\3\1\101\5\3" +
                    "\1\102\7\3\5\0\3\3\12\0\3\3\13\0\1\3" +
                    "\2\0\1\3\1\103\2\3\1\104\14\3\5\0\3\3" +
                    "\12\0\3\3\13\0\1\3\2\0\14\3\1\105\4\3" +
                    "\5\0\3\3\12\0\3\3\13\0\1\3\2\0\4\3" +
                    "\1\106\5\3\1\107\6\3\5\0\3\3\12\0\3\3" +
                    "\13\0\1\3\2\0\1\3\1\110\12\3\1\111\4\3" +
                    "\5\0\3\3\12\0\3\3\13\0\1\3\2\0\11\3" +
                    "\1\112\7\3\5\0\3\3\12\0\3\3\13\0\1\3" +
                    "\2\0\1\3\1\113\17\3\5\0\3\3\73\0\1\114" +
                    "\6\0\1\115\71\0\1\116\50\0\6\60\1\117\55\60" +
                    "\1\0\3\3\2\0\2\7\6\0\1\7\1\61\2\0" +
                    "\21\3\5\0\3\3\12\0\3\3\13\0\1\3\2\0" +
                    "\1\3\1\120\17\3\5\0\3\3\11\0\6\63\3\0" +
                    "\53\63\1\0\3\3\13\0\1\3\2\0\2\3\1\121" +
                    "\16\3\5\0\3\3\12\0\3\3\13\0\1\3\2\0" +
                    "\3\3\1\122\15\3\5\0\3\3\12\0\3\3\13\0" +
                    "\1\3\2\0\21\3\5\0\1\3\1\123\1\3\12\0" +
                    "\3\3\13\0\1\3\2\0\1\124\4\3\1\125\13\3" +
                    "\5\0\3\3\12\0\3\3\13\0\1\3\2\0\7\3" +
                    "\1\126\11\3\5\0\3\3\12\0\3\3\13\0\1\3" +
                    "\2\0\20\3\1\127\5\0\3\3\12\0\3\3\13\0" +
                    "\1\3\2\0\12\3\1\130\6\3\5\0\3\3\12\0" +
                    "\3\3\13\0\1\3\2\0\6\3\1\131\12\3\5\0" +
                    "\3\3\12\0\3\3\13\0\1\3\2\0\1\3\1\132" +
                    "\17\3\5\0\3\3\12\0\3\3\13\0\1\3\2\0" +
                    "\20\3\1\133\5\0\3\3\12\0\3\3\13\0\1\3" +
                    "\2\0\1\3\1\134\17\3\5\0\3\3\12\0\3\3" +
                    "\13\0\1\3\2\0\16\3\1\135\2\3\5\0\3\3" +
                    "\12\0\3\3\13\0\1\3\2\0\11\3\1\136\7\3" +
                    "\5\0\3\3\12\0\3\3\13\0\1\3\2\0\5\3" +
                    "\1\137\13\3\5\0\3\3\12\0\3\3\13\0\1\3" +
                    "\2\0\1\140\20\3\5\0\3\3\12\0\3\3\13\0" +
                    "\1\3\2\0\15\3\1\141\3\3\5\0\3\3\12\0" +
                    "\3\3\13\0\1\3\2\0\15\3\1\142\3\3\5\0" +
                    "\3\3\12\0\3\3\13\0\1\3\2\0\11\3\1\143" +
                    "\7\3\5\0\3\3\11\0\11\116\1\0\1\116\1\144" +
                    "\1\0\42\116\1\0\4\116\1\0\3\3\13\0\1\3" +
                    "\2\0\3\3\1\145\15\3\5\0\3\3\12\0\3\3" +
                    "\13\0\1\3\2\0\12\3\1\146\6\3\5\0\3\3" +
                    "\12\0\3\3\13\0\1\3\2\0\3\3\1\147\15\3" +
                    "\5\0\3\3\12\0\3\3\13\0\1\3\2\0\2\3" +
                    "\1\150\16\3\5\0\3\3\12\0\3\3\13\0\1\3" +
                    "\2\0\6\3\1\151\11\3\1\152\5\0\3\3\12\0" +
                    "\3\3\13\0\1\3\2\0\3\3\1\153\15\3\5\0" +
                    "\3\3\12\0\3\3\13\0\1\3\2\0\13\3\1\154" +
                    "\5\3\5\0\3\3\12\0\3\3\13\0\1\3\2\0" +
                    "\7\3\1\121\11\3\5\0\3\3\12\0\3\3\13\0" +
                    "\1\3\2\0\5\3\1\155\13\3\5\0\3\3\12\0" +
                    "\3\3\13\0\1\3\2\0\15\3\1\156\3\3\5\0" +
                    "\3\3\12\0\3\3\13\0\1\3\2\0\15\3\1\157" +
                    "\3\3\5\0\3\3\12\0\3\3\13\0\1\3\2\0" +
                    "\6\3\1\160\12\3\5\0\3\3\12\0\3\3\13\0" +
                    "\1\3\2\0\1\3\1\161\17\3\5\0\3\3\12\0" +
                    "\3\3\13\0\1\3\2\0\3\3\1\162\15\3\5\0" +
                    "\3\3\12\0\3\3\13\0\1\3\2\0\1\163\20\3" +
                    "\5\0\3\3\12\0\3\3\13\0\1\3\2\0\6\3" +
                    "\1\164\12\3\5\0\3\3\12\0\3\3\13\0\1\3" +
                    "\2\0\13\3\1\165\2\3\1\166\2\3\5\0\3\3" +
                    "\24\0\1\167\51\0\3\3\13\0\1\3\2\0\1\3" +
                    "\1\170\17\3\5\0\3\3\12\0\3\3\13\0\1\3" +
                    "\2\0\1\171\20\3\5\0\3\3\12\0\3\3\13\0" +
                    "\1\3\2\0\21\3\5\0\1\172\2\3\12\0\3\3" +
                    "\13\0\1\3\2\0\12\3\1\173\6\3\5\0\3\3" +
                    "\12\0\3\3\13\0\1\3\2\0\12\3\1\174\6\3" +
                    "\5\0\3\3\12\0\3\3\13\0\1\3\2\0\3\3" +
                    "\1\175\15\3\5\0\3\3\12\0\3\3\13\0\1\3" +
                    "\2\0\16\3\1\176\2\3\5\0\3\3\12\0\3\3" +
                    "\13\0\1\3\2\0\3\3\1\177\15\3\5\0\3\3" +
                    "\12\0\3\3\13\0\1\3\2\0\3\3\1\200\15\3" +
                    "\5\0\3\3\12\0\3\3\13\0\1\3\2\0\3\3" +
                    "\1\201\15\3\5\0\3\3\12\0\3\3\13\0\1\3" +
                    "\2\0\1\3\1\202\17\3\5\0\3\3\25\0\1\117" +
                    "\50\0\3\3\13\0\1\3\2\0\12\3\1\203\6\3" +
                    "\5\0\3\3\12\0\3\3\13\0\1\3\2\0\15\3" +
                    "\1\204\3\3\5\0\3\3\12\0\3\3\13\0\1\3" +
                    "\2\0\16\3\1\205\2\3\5\0\3\3\12\0\3\3" +
                    "\13\0\1\3\2\0\5\3\1\206\13\3\5\0\3\3" +
                    "\12\0\3\3\13\0\1\3\2\0\3\3\1\207\15\3" +
                    "\5\0\3\3\12\0\3\3\13\0\1\3\2\0\20\3" +
                    "\1\210\5\0\3\3\12\0\3\3\13\0\1\3\2\0" +
                    "\5\3\1\211\13\3\5\0\3\3\12\0\3\3\13\0" +
                    "\1\3\2\0\11\3\1\212\7\3\5\0\3\3\12\0" +
                    "\3\3\13\0\1\3\2\0\12\3\1\213\6\3\5\0" +
                    "\3\3\12\0\3\3\13\0\1\3\2\0\1\3\1\214" +
                    "\17\3\5\0\3\3\12\0\3\3\13\0\1\3\2\0" +
                    "\2\3\1\215\16\3\5\0\3\3\12\0\3\3\13\0" +
                    "\1\3\2\0\21\3\5\0\2\3\1\216\12\0\3\3" +
                    "\13\0\1\3\2\0\12\3\1\217\6\3\5\0\3\3" +
                    "\12\0\3\3\13\0\1\3\2\0\1\3\1\220\17\3" +
                    "\5\0\3\3\12\0\3\3\13\0\1\3\2\0\3\3" +
                    "\1\221\15\3\5\0\3\3\11\0";
    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();
    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\1\1\11\5\1\1\11\1\1\1\11\20\1\5\11" +
                    "\1\1\10\11\2\1\2\0\3\11\1\0\2\1\1\0" +
                    "\1\11\1\0\26\1\2\11\1\0\1\11\24\1\1\0" +
                    "\22\1\1\0\32\1";

    private static int[] zzUnpackAction() {
        int[] result = new int[145];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackRowMap() {
        int[] result = new int[145];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    private static int[] zzUnpackTrans() {
        int[] result = new int[4992];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    private static int[] zzUnpackAttribute() {
        int[] result = new int[145];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true iff the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true iff the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */

    /**
     * Return a new Symbol with the given token id, and with the current line and
     * column numbers.
     */
    Symbol newSym(int tokenId) {
        return new Symbol(tokenId, yyline, yycolumn);
    }

    /**
     * Return a new Symbol with the given token id, the current line and column
     * numbers, and the given token value.  The value is used for tokens such as
     * identifiers and numbers.
     */
    Symbol newSym(int tokenId, Object value) {
        return new Symbol(tokenId, yyline, yycolumn, value);
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public PascalPPLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 174) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     * <p>
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public java_cup.runtime.Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                 zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':  // fall through
                    case '\u000C':  // fall through
                    case '\u0085':  // fall through
                    case '\u2028':  // fall through
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                {
                    return new java_cup.runtime.Symbol(sym.EOF);
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return newSym(sym.INT, new Integer(yytext()));
                    }
                    // fall through
                    case 58:
                        break;
                    case 2: {
                        System.out.println("Illegal char, '" + yytext() +
                                "' line: " + yyline + ", column: " + yychar);
                    }
                    // fall through
                    case 59:
                        break;
                    case 3: {
                        return newSym(sym.ID, yytext());
                    }
                    // fall through
                    case 60:
                        break;
                    case 4: {
                        return newSym(sym.DOT);
                    }
                    // fall through
                    case 61:
                        break;
                    case 5: { /* Ignore whitespace. */
                    }
                    // fall through
                    case 62:
                        break;
                    case 6: {
                        return newSym(sym.RT_PAREN);
                    }
                    // fall through
                    case 63:
                        break;
                    case 7: {
                        return newSym(sym.GTR);
                    }
                    // fall through
                    case 64:
                        break;
                    case 8: {
                        return newSym(sym.MINUS);
                    }
                    // fall through
                    case 65:
                        break;
                    case 9: {
                        return newSym(sym.LESS);
                    }
                    // fall through
                    case 66:
                        break;
                    case 10: {
                        return newSym(sym.DIVIDE);
                    }
                    // fall through
                    case 67:
                        break;
                    case 11: {
                        return newSym(sym.L_NOT);
                    }
                    // fall through
                    case 68:
                        break;
                    case 12: {
                        return newSym(sym.MOD);
                    }
                    // fall through
                    case 69:
                        break;
                    case 13: {
                        return newSym(sym.B_OR);
                    }
                    // fall through
                    case 70:
                        break;
                    case 14: {
                        return newSym(sym.B_AND);
                    }
                    // fall through
                    case 71:
                        break;
                    case 15: {
                        return newSym(sym.XOR);
                    }
                    // fall through
                    case 72:
                        break;
                    case 16: {
                        return newSym(sym.TIMES);
                    }
                    // fall through
                    case 73:
                        break;
                    case 17: {
                        return newSym(sym.PLUS);
                    }
                    // fall through
                    case 74:
                        break;
                    case 18: {
                        return newSym(sym.SEMI);
                    }
                    // fall through
                    case 75:
                        break;
                    case 19: {
                        return newSym(sym.COMMA);
                    }
                    // fall through
                    case 76:
                        break;
                    case 20: {
                        return newSym(sym.LEFT_PAREN);
                    }
                    // fall through
                    case 77:
                        break;
                    case 21: {
                        return newSym(sym.LEFT_BRKT);
                    }
                    // fall through
                    case 78:
                        break;
                    case 22: {
                        return newSym(sym.RT_BRKT);
                    }
                    // fall through
                    case 79:
                        break;
                    case 23: {
                        return newSym(sym.EQ);
                    }
                    // fall through
                    case 80:
                        break;
                    case 24: {
                        return newSym(sym.COLON);
                    }
                    // fall through
                    case 81:
                        break;
                    case 25: {
                        return newSym(sym.REAL, new Double(yytext()));
                    }
                    // fall through
                    case 82:
                        break;
                    case 26: {
                        return newSym(sym.NOT_EQ);
                    }
                    // fall through
                    case 83:
                        break;
                    case 27: {
                        return newSym(sym.LESS_EQ);
                    }
                    // fall through
                    case 84:
                        break;
                    case 28: {
                        return newSym(sym.GTR_EQ);
                    }
                    // fall through
                    case 85:
                        break;
                    case 29: {
                        return newSym(sym.STRING, yytext());
                    }
                    // fall through
                    case 86:
                        break;
                    case 30: {
                        return newSym(sym.L_OR);
                    }
                    // fall through
                    case 87:
                        break;
                    case 31: {
                        return newSym(sym.OF);
                    }
                    // fall through
                    case 88:
                        break;
                    case 32: {
                        return newSym(sym.IF);
                    }
                    // fall through
                    case 89:
                        break;
                    case 33: {
                        return newSym(sym.DO);
                    }
                    // fall through
                    case 90:
                        break;
                    case 34: {
                        return newSym(sym.ASSMNT);
                    }
                    // fall through
                    case 91:
                        break;
                    case 35: {
                        return newSym(sym.CHAR, new Character(yytext().charAt(1)));
                    }
                    // fall through
                    case 92:
                        break;
                    case 36: { /* For this stand-alone lexer, print out comments. */
                        System.out.println("Recognized comment: " + yytext());
                    }
                    // fall through
                    case 93:
                        break;
                    case 37: {
                        return newSym(sym.VAR);
                    }
                    // fall through
                    case 94:
                        break;
                    case 38: {
                        return newSym(sym.END);
                    }
                    // fall through
                    case 95:
                        break;
                    case 39: {
                        return newSym(sym.L_AND);
                    }
                    // fall through
                    case 96:
                        break;
                    case 40: {
                        return newSym(sym.BOOL, yytext());
                    }
                    // fall through
                    case 97:
                        break;
                    case 41: {
                        return newSym(sym.THEN);
                    }
                    // fall through
                    case 98:
                        break;
                    case 42: {
                        return newSym(sym.TYPE);
                    }
                    // fall through
                    case 99:
                        break;
                    case 43: {
                        return newSym(sym.REAL_KW);
                    }
                    // fall through
                    case 100:
                        break;
                    case 44: {
                        return newSym(sym.READ);
                    }
                    // fall through
                    case 101:
                        break;
                    case 45: {
                        return newSym(sym.ELSE);
                    }
                    // fall through
                    case 102:
                        break;
                    case 46: {
                        return newSym(sym.CHAR_KW);
                    }
                    // fall through
                    case 103:
                        break;
                    case 47: {
                        return newSym(sym.ARRAY);
                    }
                    // fall through
                    case 104:
                        break;
                    case 48: {
                        return newSym(sym.BEGIN);
                    }
                    // fall through
                    case 105:
                        break;
                    case 49: {
                        return newSym(sym.WRITE);
                    }
                    // fall through
                    case 106:
                        break;
                    case 50: {
                        return newSym(sym.WHILE);
                    }
                    // fall through
                    case 107:
                        break;
                    case 51: {
                        return newSym(sym.RETURN);
                    }
                    // fall through
                    case 108:
                        break;
                    case 52: {
                        return newSym(sym.STRING_KW);
                    }
                    // fall through
                    case 109:
                        break;
                    case 53: {
                        return newSym(sym.BOOL_KW);
                    }
                    // fall through
                    case 110:
                        break;
                    case 54: {
                        return newSym(sym.INT_KW);
                    }
                    // fall through
                    case 111:
                        break;
                    case 55: {
                        return newSym(sym.PROGRAM);
                    }
                    // fall through
                    case 112:
                        break;
                    case 56: {
                        return newSym(sym.FUNC);
                    }
                    // fall through
                    case 113:
                        break;
                    case 57: {
                        return newSym(sym.PROCEDURE);
                    }
                    // fall through
                    case 114:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
